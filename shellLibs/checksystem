#!/bin/bash

checkOsID() {
	cat /etc/os-release | grep "^ID=" | cut -d "=" -f 2
	[[ $? != 0 ]] && {
		return 1
	}
}

checkOsVersionID() {
	cat /etc/os-release | grep "^VERSION_ID=" | cut -d "=" -f 2
	[[ $? != 0 ]] && {
		return 1
	}
}

checkOsIDLike() {
	cat /etc/os-release | grep "^ID_LIKE=" | cut -d "=" -f 2
	[[ $? != 0 ]] && {
		return 1
	}
}

checkIPPub() {
	curl ifconfig.me
	[[ $? != 0 ]] && {
		return 1
	}
}

checkIfRootSession() {
	username=$(echo $USER)
	[[ "${username}" == "root" ]] && {
		echo "yes"
		return 0
	} || echo "no"
	return 1
}

checkIfFileHaveText() {
	text="${1}"
	filePath="${2}"

	[[ $1 == "-h" || -z $1 ]] && {
		echo "Usage: sudo $FUNCNAME <text> <filePath>
           Note: filePath oke, not \"filePath\"."
		return 0
	}

	grep -irne "${text}" "${filePath}" &>/dev/null
	[[ $? == 0 ]] && {
		echo "yes"
		return 0
	} || {
		echo "no"
		return 1
	}
}

checkIfUserExist() {
	username=${1}
	id ${username}
	[[ $? == 0 ]] && {
		echo "yes"
		return 0
	} || {
		echo "no"
		return 1
	}
}

checkIfCommandExist() {
	command=${1}
	command -v ${command} >/dev/null
	[[ $? == 0 ]] && {
		echo "yes"
		return 0
	} || {
		echo "no"
		return 1
	}
}

checkNvidiaVersion() {
	cat /proc/driver/nvidia/version
}

go-track-package() {
	go mod graph
}

unknown_os() {
	echo "Unfortunately, your operating system distribution and version are not supported by this script."
	echo
	echo "You can override the OS detection by setting os= and dist= prior to running this script."
	echo "You can find a list of supported OSes and distributions on our website: https://packages.gitlab.com/docs#os_distro_version"
	echo
	echo "For example, to force Ubuntu Trusty: os=ubuntu dist=trusty ./script.sh"
	exit 1
}

checkOsDistro() {
	if [[ (-z "${os}") && (-z "${dist}") ]]; then
		# some systems dont have lsb-release yet have the lsb_release binary and
		# vice-versa
		if [ -e /etc/lsb-release ]; then
			. /etc/lsb-release

			if [ "${ID}" = "raspbian" ]; then
				os=${ID}
				dist=$(cut --delimiter='.' -f1 /etc/debian_version)
			else
				os=${DISTRIB_ID}
				dist=${DISTRIB_CODENAME}

				if [ -z "$dist" ]; then
					dist=${DISTRIB_RELEASE}
				fi
			fi

		elif [ $(which lsb_release 2>/dev/null) ]; then
			dist=$(lsb_release -c | cut -f2)
			os=$(lsb_release -i | cut -f2 | awk '{ print tolower($1) }')

		elif [ -e /etc/debian_version ]; then
			# some Debians have jessie/sid in their /etc/debian_version
			# while others have '6.0.7'
			os=$(cat /etc/issue | head -1 | awk '{ print tolower($1) }')
			if grep -q '/' /etc/debian_version; then
				dist=$(cut --delimiter='/' -f1 /etc/debian_version)
			else
				dist=$(cut --delimiter='.' -f1 /etc/debian_version)
			fi

		else
			unknown_os
		fi
	fi

	if [ -z "$dist" ]; then
		unknown_os
	fi

	# remove whitespace from OS and dist name
	os="${os// /}"
	dist="${dist// /}"

	echo "$os/$dist."
}

checkZombieListAll() {
	ps aux | grep 'Z'
}

checkZombieParents() {
	[[ -z $1 || $1 = "-h" ]] && {
		echo "Use: $FUNCNAME <pid>"
	}
	pstree -p -s "${1}"
}
