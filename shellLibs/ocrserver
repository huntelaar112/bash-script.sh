#!/bin/bash

#set -e
publicIp=$(curl ifconfig.me 2>/dev/null)

[[ ${publicIp} == "58.84.1.134" ]] && { #prod 2
	export idEndpoint="https://dgt.smartocr.vn/idfulltoyota/v1/recognition"
	export faceEndpoint="https://dgt.smartocr.vn/face/v1/recognition"
	#export nginxgenConName="nginxgenocrprodvn2"
}

[[ ${publicIp} == "61.28.229.184" ]] && { #prod-2gpu
	export idEndpoint="https://gapi.smartocr.vn/idfull/v1/recognition"
	export faceEndpoint="https://gapi.smartocr.vn/face/v1/recognition"
	#export nginxgenConName="nginxgenocrprodvn"
}

[[ ${publicIp} == "103.245.249.115" ]] && { #stgvn
	export idEndpoint="https://stgapi.smartocr.vn/idfull/v1/recognition"
	export faceEndpoint="https://stgapi.smartocr.vn/face/v1/recognition"
	#export nginxgenConName="nginxgenocrstgvn"
}

[[ ${publicIp} == "139.180.134.184" ]] && { #stgjp
	export idEndpoint="https://jpffstg.smartocr.net/jppff/v1/recognition"
	export faceEndpoint="https://jpffstg.smartocr.net/jphff/v1/recognition"
	#export nginxgenConName="nginxgenocrstgvn"
}

uuid=$(cat /sys/class/dmi/id/product_uuid)
[[ ${uuid} == "E3A54C00-1338-11EC-8000-3CECEFB98480" ]] && {
	export idEndpoint="https://jpcapi.smartocr.net/jp/hw/v1/recognition"
	export faceEndpoint="http://jpcapi.smartocr.net/face/v1/recognition"
}

export nginxgenConName=$(docker ps --format "{{.Names}}" | grep "nginxgen")

apicheck() {
	echo "Test endpoint: ${idEndpoint}"
	curl -X POST ${idEndpoint}
	echo ""
	echo "Test endpoint: ${faceEndpoint}"
	curl -X POST ${faceEndpoint}
	echo ""
}

apihealthcheck() {
	curl localhost/status/bestatus
}

nginxgen-showconfig() {
	docker cp ${nginxgenConName}:/etc/nginx/conf-http.d/docker-http.conf /tmp/nginx.conf
	nano -l /tmp/nginx.conf
}

nginxgen-showloggen() {
	docker cp ${nginxgenConName}:/var/log/nginx/nginxgen.log /tmp/nginxgen.log
	tail -100 /tmp/nginxgen.log | jq
}

nginxgen-gotolog() {
	cd /mnt/containerdata/nginxgen/var_log_nginx || return 1
}

nginxgen-gotoconfig() {
	cd /mnt/containerdata/nginxgen/etc_nginxgen_watchroot || return 1
}

nginxgen-execbash() {
	docker exec -it ${nginxgenConName} bash
}

nginxgen-json2csv() {
	if command -v json2csv &>/dev/null; then
		echo ""
	else
		echo "Need install json2csv first."
		#apt install json2csv
		return 1
	fi
	if="${1}"
	json2csv -p -k reqid,mlog,host,alpn,remote_addr,x-forwared-for,add-forwarded,remote_user,time_local,request,request_length,bytes_sent,status,agent,ua,rt,uct,uht,urt -i "${if}" -o nginxlog.csv
}

nginxgen-checkconfig() {
	docker exec $(docker ps -f name=nginxgen -q) nginx -t
}

nginxgen-getlog() {
	service="${1}"
	client="${2}"
	date="${3}"
	token=""

	#[[ ${date} == "" ]] && {
	#	date=$(date +"%d/%b/%Y:%H:%M:%S" |  cut -d: -f1)
	#}

	[[ $1 == "-h" || -z $1 ]] && {
		echo "Usage: sudo $FUNCNAME <service> [client] [date]
Note: default date: all
	  default client: all client"
		return 0
	}

case "$client" in
    "groo")
        token="8eqsIYq9t2bndUg="
        ;;
    "pgb")
        token="uX-DGZebuw5KX_Q="
        ;;
    *)
        token=""
        ;;
esac

	zgrep -hE "${service}" /mnt/containerdata/nginxgen/var_log_nginx/*.smartocr.vn-access* | grep -E "${token}" | grep -E "${date}"

	#cat /mnt/containerdata/nginxgen/var_log_nginx/*.smartocr.vn-access.log | grep -E "${date}" | grep -E "\"status\": \"${status}\"" | grep -E "${token}" >>"${service}".json
	#nginxgen-json2csv "${service}".json
	#[[ $? == 0 ]] && {
	#	log-step "success parser to nginxlog.csv"
	#} || {
	#	log-err "false to parser json2csv"
	#}
}
